@page "/resize"
@inject IConfiguration Configuration
@inject AppConfig AppConfig
@using System.ComponentModel.DataAnnotations;

<PageTitle>Resize</PageTitle>

<h1>Resize</h1>
<hr>


<EditForm OnValidSubmit="@Submit" Model="@Model">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (AppConfig != null)
    {
        <div class="row mb-3">
            <label class="col-sm-3 col-form-label" for="SelectedConfigKey">Predefined resize config:</label>
            <div class="col-sm-8">
                <InputSelect class="form-select" id="SelectedConfigKey" Value="@SelectedConfigKey" ValueExpression="@(()=>SelectedConfigKey)" ValueChanged="@((string value) => OnConfigChanged(value))">
                    <option value="">Default config...</option>
                    @foreach (var item in AppConfig.ResizeConfigs)
                    {
                        <option value="@item.Key">@item.Key</option>
                    }
                </InputSelect>
            </div>
        </div>
        <hr>
    }
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="FileFilter">File filter:</label>
        <div class="col-sm-8">
            <InputText class="form-control" id="FileFilter" @bind-Value="@Model.ResizeConfig.FileFilter" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="ResizeMethod">Resize method:</label>
        <div class="col-sm-8">
            <InputSelect class="form-select" id="ResizeMethod" @bind-Value="@Model.ResizeConfig.ResizeMethod">
                @foreach (var item in Enum.GetValues(typeof(ResizeMethod)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="MaxWidth">Max width:</label>
        <div class="col-sm-8">
            <InputNumber class="form-control" id="MaxWidth" @bind-Value="@Model.ResizeConfig.MaxWidth" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="MaxHeight">Max height:</label>
        <div class="col-sm-8">
            <InputNumber class="form-control" id="MaxHeight" @bind-Value="@Model.ResizeConfig.MaxHeight" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="JpgQuality">JPG quality:</label>
        <div class="col-sm-8">
            <InputNumber class="form-control" id="JpgQuality" @bind-Value="@Model.ResizeConfig.JpgQuality" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="ClearMetadata">Clear metadata:</label>
        <div class="col-sm-8">
            <InputCheckbox class="form-check-input" id="ClearMetadata" @bind-Value="@Model.ResizeConfig.ClearMetadata" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="FilenamePattern">Filename pattern:</label>
        <div class="col-sm-8">
            <InputText class="form-control" id="FilenamePattern" @bind-Value="@Model.ResizeConfig.FilenamePattern" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="FilenameCase">Filename case:</label>
        <div class="col-sm-8">
            <InputSelect class="form-select" id="FilenameCase" @bind-Value="@Model.ResizeConfig.FilenameCase">
                @foreach (var item in Enum.GetValues(typeof(CharacterCasing)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="ExtensionCase">Extension case:</label>
        <div class="col-sm-8">
            <InputSelect class="form-select" id="ExtensionCase" @bind-Value="@Model.ResizeConfig.ExtensionCase">
                @foreach (var item in Enum.GetValues(typeof(CharacterCasing)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
    </div>
    <hr>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="Folder"><strong>Folder:</strong></label>
        <div class="col-sm-8">
            <div class="input-group mb-3">
                <InputText class="form-control" id="Folder" @bind-Value="@Model.Folder" /> <button class="btn btn-outline-secondary" type="button" @onclick="@SelectFolder">...</button>
            </div>
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="Recursive">Recursive:</label>
        <div class="col-sm-8">
            <InputCheckbox class="form-check-input" id="Recursive" @bind-Value="@Model.ResizeConfig.Recursive" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="StopOnError">Stop on error:</label>
        <div class="col-sm-8">
            <InputCheckbox class="form-check-input" id="StopOnError" @bind-Value="@Model.ResizeConfig.StopOnError" />
        </div>
    </div>
    <div class="row mb-3">
        <label class="col-sm-3 col-form-label" for="Verbose">Verbose output:</label>
        <div class="col-sm-8">
            <InputCheckbox class="form-check-input" id="Verbose" @bind-Value="@Model.Verbose" />
        </div>
    </div>
    <br>
    <button class="btn btn-primary" type="submit">Resize</button>
</EditForm>
<br>
<p>@Message</p>
<br>
<br>


@code {

    public string? SelectedConfigKey { get; set; }

    private class ModelClass
    {

        public ResizeConfig ResizeConfig { get; set; } = new ResizeConfig();

        public bool Verbose { get; set; } = false;

        [Required]
        public string? Folder { get; set; }

    }

    private ModelClass Model { get; set; } = new ModelClass();

    public string? Message { get; set; }

    protected override void OnInitialized()
    {

    }

    private void OnConfigChanged(string key)
    {
        SelectedConfigKey = key;

        if (string.IsNullOrWhiteSpace(key))
            Model.ResizeConfig = new ResizeConfig();
        else if (AppConfig != null)
        {
            Model.ResizeConfig = AppConfig.ResizeConfigs.Where(d => string.Equals(d.Key, key, StringComparison.OrdinalIgnoreCase)).FirstOrDefault().Value.Clone();
            if (Model.ResizeConfig == null) { Model.ResizeConfig = new ResizeConfig(); }
        }
    }

    private void SelectFolder()
    {
        Message = "SelectFolder...";
    }

    private void Submit()
    {
        Message = "Submit...";
    }
}

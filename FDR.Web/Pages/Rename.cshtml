@page
@model FDR.Web.Pages.RenameModel
@{
    ViewData["Title"] = "Rename";
}
<h1>@ViewData["Title"]</h1>
<hr>

@if (false && HttpMethods.IsPost(Request.Method))
{
    <p>
        @* Selected config: @Html.DisplayFor(m => m.ConfigKey)<br> *@
        File filter: @Html.DisplayFor(m => m.RenameConfig.FileFilter)<br>
        Filename pattern: @Html.DisplayFor(m => m.RenameConfig.FilenamePattern)<br>
        Filename case: @Html.DisplayFor(m => m.RenameConfig.FilenameCase, Html.GetEnumSelectList<FDR.Tools.Library.CharacterCasing>())<br>
        Extension case: @Html.DisplayFor(m => m.RenameConfig.ExtensionCase, Html.GetEnumSelectList<FDR.Tools.Library.CharacterCasing>())<br>
        Additional files: @Html.DisplayFor(m => m.RenameConfig.AdditionalFiles)<br>
        Recursive: @Html.DisplayFor(m => m.RenameConfig.Recursive)<br>
        Stop on error: @Html.DisplayFor(m => m.RenameConfig.StopOnError)<br>
        <hr>
        Verbose output: @Html.DisplayFor(m => m.Verbose)<br>
        Folder: @Html.DisplayFor(m => m.Folder)<br>
        <hr>
        @* Html.TextAreaFor(m => m.Output)<br> *@
    </p>
}
else
{
    @using (Html.BeginForm(FormMethod.Post))
    {
        <div>
            <div asp-validation-summary="All" class="text-danger col-sm-8"></div>
            @if (Model.AppConfig?.RenameConfigs != null)
            {
                <div class="row mb-3">
                    @Html.LabelFor(m => m.ConfigKey, "Predefined rename config:", new { @class="col-sm-3 col-form-label" })
                    <div class="col-sm-8">
                        @Html.DropDownListFor(m => m.ConfigKey, Model.AppConfig?.RenameConfigs?.Select(d => new SelectListItem(d.Key, d.Key)), "<default>", new { @class="form-select", onchange="location = \"?config=\" + this.value;" })
                    </div>
                </div>
            }
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.FileFilter, "File filter:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.TextBoxFor(m => m.RenameConfig.FileFilter, new { @class="form-control" })
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.FilenamePattern, "Filename pattern:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.TextBoxFor(m => m.RenameConfig.FilenamePattern, new { @class="form-control" })
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.FilenameCase, "Filename case:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.RenameConfig.FilenameCase, Html.GetEnumSelectList<FDR.Tools.Library.CharacterCasing>(), new { @class="form-select" })
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.ExtensionCase, "Extension case:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.DropDownListFor(m => m.RenameConfig.ExtensionCase, Html.GetEnumSelectList<FDR.Tools.Library.CharacterCasing>(), new { @class="form-select" })
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.AdditionalFiles, "Additional files:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.CheckBoxFor(m => m.RenameConfig.AdditionalFiles, new { @class="form-check-input" })
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-sm-8">
                </div>
            </div>
            <hr>
            <div class="row mb-3">
                @Html.LabelFor(m => m.Folder, "Folder:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    <div class="input-group mb-3">
                        @Html.TextBoxFor(m => m.Folder, new { @class="form-control" })
                        @*<button class="btn btn-outline-secondary" type="button" @onclick="@SelectFolder">...</button>*@
                    </div>
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.Recursive, "Recursive:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.CheckBoxFor(m => m.RenameConfig.Recursive, new { @class="form-check-input" })
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.RenameConfig.StopOnError, "Stop on error:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.CheckBoxFor(m => m.RenameConfig.StopOnError, new { @class="form-check-input" })
                </div>
            </div>
            <div class="row mb-3">
                @Html.LabelFor(m => m.Verbose, "Verbose output:", new { @class="col-sm-3 col-form-label" })
                <div class="col-sm-8">
                    @Html.CheckBoxFor(m => m.Verbose, new { @class="form-check-input" })
                </div>
            </div>
            <br>
            <input type="submit" value="Rename" class="btn btn-primary"><br>
        </div>
    }
}

@section scripts{
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <partial name="_ValidationScriptsPartial" />
    <script src="~/lib/jquery-ajax-unobtrusive/dist/jquery.unobtrusive-ajax.min.js"></script>
}
